import sys
import math
import copy

step1_sol = [[2243, [848, 496, 174, 820]], [2663, [175, 545, 63, 496]], [2087, [667, 1021, 699, 545]], [3067, [832, 296, 690, 1021]], [3881, [61, 847, 153, 296]], [2333, [906, 482, 878, 847]], [1607, [426, 25, 199, 482]], [2111, [14, 31, 587, 25]], [3877, [406, 124, 998, 31]], [1117, [279, 866, 326, 124]], [2371, [863, 892, 474, 866]], [2953, [654, 234, 98, 892]], [2707, [174, 5, 827, 67]], [1549, [63, 623, 763, 5]], [1409, [699, 938, 534, 623]], [3343, [690, 47, 319, 938]], [3491, [153, 979, 547, 47]], [3467, [878, 46, 928, 979]], [2411, [199, 858, 304, 46]], [2909, [587, 919, 281, 858]], [1321, [998, 413, 701, 919]], [1913, [326, 133, 531, 413]], [2341, [474, 493, 795, 133]], [3299, [98, 69, 835, 493]], [1481, [827, 564, 8, 916]], [3821, [763, 913, 331, 564]], [1399, [534, 84, 642, 913]], [2477, [319, 764, 396, 84]], [2753, [547, 1001, 489, 764]], [2063, [928, 420, 884, 1001]], [1009, [304, 125, 337, 420]], [1187, [281, 902, 658, 125]], [3011, [701, 905, 299, 902]], [3469, [531, 761, 851, 905]], [2467, [795, 517, 775, 761]], [2521, [835, 520, 518, 517]], [3559, [8, 341, 683, 213]], [2161, [331, 586, 552, 341]], [3833, [642, 435, 297, 586]], [2609, [396, 275, 967, 435]], [3557, [489, 918, 602, 275]], [2843, [884, 71, 15, 918]], [3037, [337, 846, 948, 71]], [3539, [658, 159, 151, 846]], [2281, [299, 579, 675, 159]], [3571, [851, 988, 570, 579]], [2621, [775, 540, 508, 988]], [1039, [518, 247, 75, 540]], [1489, [683, 722, 456, 718]], [2003, [552, 511, 203, 722]], [1873, [297, 603, 691, 511]], [1831, [967, 772, 762, 603]], [1657, [602, 206, 328, 772]], [1447, [15, 543, 509, 206]], [1733, [948, 371, 525, 543]], [2957, [151, 995, 707, 371]], [2903, [675, 749, 879, 995]], [3533, [570, 265, 571, 749]], [1303, [508, 488, 774, 265]], [1747, [75, 573, 195, 488]], [1583, [456, 211, 615, 171]], [1471, [203, 708, 946, 211]], [1601, [691, 680, 228, 708]], [1063, [762, 24, 202, 680]], [3923, [328, 212, 128, 24]], [1879, [509, 651, 79, 212]], [3313, [525, 895, 721, 651]], [2287, [707, 729, 877, 895]], [1637, [879, 889, 945, 729]], [1907, [571, 725, 735, 889]], [1567, [774, 54, 624, 725]], [1697, [195, 716, 118, 54]], [
    1307, [615, 966, 1012, 575]], [3769, [946, 28, 408, 966]], [1801, [228, 88, 284, 28]], [1097, [202, 389, 139, 88]], [3643, [128, 454, 808, 389]], [3209, [79, 514, 404, 454]], [1181, [721, 702, 196, 514]], [3863, [877, 1000, 310, 702]], [1087, [945, 981, 497, 1000]], [1663, [735, 991, 739, 981]], [3373, [624, 494, 652, 991]], [2141, [118, 250, 410, 494]], [2549, [1012, 249, 445, 566]], [2207, [408, 30, 990, 249]], [1019, [284, 245, 339, 30]], [3631, [139, 901, 711, 245]], [1597, [808, 292, 912, 901]], [3767, [404, 33, 149, 292]], [3251, [196, 484, 954, 33]], [1993, [310, 9, 263, 484]], [1049, [497, 530, 704, 9]], [3407, [739, 759, 87, 530]], [3163, [652, 22, 910, 759]], [1523, [410, 244, 360, 22]], [2677, [445, 872, 34, 428]], [1933, [990, 443, 421, 872]], [3853, [339, 829, 855, 443]], [2551, [711, 817, 535, 829]], [1259, [912, 163, 577, 817]], [3541, [149, 671, 653, 163]], [2749, [954, 262, 868, 671]], [1229, [263, 526, 6, 262]], [2579, [704, 236, 18, 526]], [3391, [87, 632, 308, 236]], [3221, [910, 20, 136, 632]], [1823, [360, 56, 338, 20]], [1289, [34, 294, 444, 256]], [3329, [421, 770, 192, 294]], [2237, [855, 661, 431, 770]], [2591, [535, 787, 941, 661]], [1931, [577, 694, 746, 787]], [2357, [653, 1013, 135, 694]], [3929, [868, 97, 613, 1013]], [1571, [6, 352, 880, 97]], [3229, [18, 105, 181, 352]], [2297, [308, 392, 516, 105]], [2011, [136, 365, 463, 392]], [2969, [338, 504, 614, 365]], [3511, [444, 53, 471, 502]], [3187, [192, 37, 601, 53]], [2099, [431, 728, 512, 37]], [1787, [941, 628, 44, 728]], [1979, [746, 161, 469, 628]], [2711, [135, 706, 876, 161]], [3023, [613, 807, 137, 706]], [2699, [880, 313, 897, 807]], [3203, [181, 1017, 833, 313]], [3623, [516, 479, 861, 1017]], [2593, [463, 994, 756, 479]], [2617, [614, 19, 451, 994]], [1213, [471, 977, 917, 335]], [3259, [601, 625, 839, 977]], [1531, [512, 276, 944, 625]], [1867, [44, 353, 345, 276]], [2441, [469, 650, 560, 353]], [1621, [876, 255, 367, 650]], [1667, [137, 964, 864, 255]], [1759, [897, 738, 472, 964]], [3041, [833, 741, 165, 738]], [2143, [861, 524, 890, 741]], [1543, [756, 447, 217, 524]], [2273, [451, 818, 744, 447]]]
#step1_sol = [[1951, [587, 710, 318, 564]], [2729, [962, 85, 9, 710]], [2971, [78, 161, 689, 85]], [2311, [318, 210, 616, 231]], [1427, [9, 948, 348, 210]], [1489, [689, 848, 288, 948]], [3079, [616, 184, 264, 702]], [2473, [348, 399, 481, 184]], [1171, [288, 96, 902, 399]]]

SIZE_IN = 10


def pmap(amap):
    print("Map:")
    for l in amap:
        print("".join(l))


def rotate_m(m):
    l = len(m)
    out = copy.deepcopy(m)
    for i in range(l):
        for j in range(l):
            out[i][j] = m[j][l-1-i]

    return out


def flip_ver_m(m):
    l = len(m)
    out = copy.deepcopy(m)
    for i in range(l):
        for j in range(l):
            out[l-i-1][j] = m[i][j]
    return out


def _toint(a):
    if a == "#":
        return "1"
    else:
        return "0"


def toint(m):
    return int("".join(list(map(_toint, m))), 2)


def calc_edges(m):
    top = m[0]
    down = m[-1]
    left = []
    right = []
    for l in m:
        left.append(l[0])
        right.append(l[-1])
    return [toint(top), toint(right), toint(down), toint(left)]


tiles = sys.stdin.read().split("\n\n")

SIZE = int(math.sqrt(len(tiles)))

pieces = dict()
for t in tiles:
    lines = t.split("\n")
    if len(lines) == 1:
        break
    n = lines[0].split(" ")[1][:-1]
    n = int(n)
    pieces[n] = list(map(list, lines[1:]))


SIZE_IN = SIZE_IN - 2

tmap = list()
line = ["X"] * SIZE_IN * SIZE
for i in range(len(line)):
    tmap.append(line[:])


for s_i in range(len(step1_sol)):
    s = step1_sol[s_i]
    p = pieces[s[0]]
    res = p
    for i in range(4):
        found = False
        for res in [p, flip_ver_m(p)]:
            if calc_edges(res) == s[1]:
                found = True
                break

        if found:
            break

        p = rotate_m(p)
    if not found:
        print("error")
        sys.exit(0)

    line = s_i // SIZE
    col = s_i % SIZE
    for i in range(SIZE_IN):
        for j in range(SIZE_IN):
            tmap[line*SIZE_IN+i][col*SIZE_IN+j] = res[i+1][j+1]

monster = [[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' '],
           ['#', ' ', ' ', ' ', ' ', '#', '#', ' ', ' ', ' ',
               ' ', '#', '#', ' ', ' ', ' ', ' ', '#', '#', '#'],
           [' ', '#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ']]


def paint_monster(tmap, i, j):
    for ii in range(len(monster)):
        for jj in range(len(monster[ii])):
            if monster[ii][jj] == "#":
                tmap[i+ii][j+jj] = "O"
    return tmap


def find_monster(tmap):
    for i in range(len(tmap)):
        for j in range(len(tmap[i])):
            found = True
            for ii in range(len(monster)):
                for jj in range(len(monster[ii])):
                    if i + ii >= len(tmap):
                        found = False
                        break
                    if j + jj >= len(tmap[i+ii]):
                        found = False
                        break
                    if monster[ii][jj] == '#' and tmap[i+ii][j+jj] == '.':
                        found = False
                        continue
            if found:
                tmap = paint_monster(tmap, i, j)
    return tmap


for i in range(4):

    tmap = find_monster(tmap)

    tmap = flip_ver_m(tmap)
    tmap = find_monster(tmap)
    tmap = flip_ver_m(tmap)

    tmap = rotate_m(tmap)

pmap(tmap)

n_hash = 0
for i in range(len(tmap)):
    for j in range(len(tmap[i])):
        if tmap[i][j] == "#":
            n_hash += 1

print(n_hash)
